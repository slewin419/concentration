{"version":3,"sources":["components/Card.js","components/Board.js","components/Timer.js","lib/Deck.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Card","_this$props","this","props","id","img","flipped","matched","react_default","a","createElement","className","concat","data-match","React","Component","Board","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","size","components_Card","key","_this2","cards","deck","forEach","card","i","push","renderCard","boardClassName","onClick","renderBoard","Timer","TimeFormat","fromS","time","IMAGES","Deck","buildDeck","shuffle","flipCard","arguments","length","undefined","flip","cardIndex","findIndex","makePair","match","Game","timerInterval","preventClick","pendingMatch","gameStarted","gameComplete","setInterval","setState","prevState","clearInterval","_this3","setTimeout","objectSpread","every","card1","card2","re","exec","isPair","handlePendingMatch","e","_this4","_this$state","test","target","cardId","_this4$state2","handleCardPicked","_this4$state","newDeck","_this5","_this$state2","components_Board","handleClick","components_Timer","newGame","App","components_Game","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eda96b79.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Card extends React.Component {    \r\n\r\n    render() {\r\n        let {id, img} = this.props;\r\n\r\n        let flipped = this.props.flipped ? 'flipped' : '',\r\n            matched = this.props.matched ? 'matched' : '';\r\n\r\n        return (\r\n            <div className={`card ${flipped} ${matched}`}>\r\n                <div className=\"card-wrapper \">\r\n                    <div id={id} data-match={img} className=\"front side\"></div>\r\n                    <div className={`back side ${img}`}></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n//import shuffle from 'fisher-yates-shuffle';\r\n\r\nclass Board extends React.Component {\r\n\r\n\r\n    /**\r\n     *\r\n     * @param props {size,cards}\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            size: \"44\",\r\n        };\r\n    }\r\n\r\n    renderCard(id,img, flipped, matched) {\r\n        return <Card key={id}\r\n                     id={id}\r\n                     img={img}\r\n                     flipped={flipped}\r\n                     matched={matched} />\r\n    }\r\n\r\n    renderBoard() {\r\n        let cards = [];\r\n        this.props.deck.forEach((card,i) => {\r\n            cards.push(this.renderCard(card.id,card.img,card.flipped, card.matched));\r\n        });\r\n        return cards;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"board\"\r\n                 className={this.boardClassName}\r\n                 onClick={this.props.onClick}>\r\n                {this.renderBoard()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport TimeFormat from 'hh-mm-ss';\r\n\r\nclass Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"timer\">\r\n                {TimeFormat.fromS(this.props.time) || 0}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;\r\n","import shuffle from \"fisher-yates-shuffle\";\r\n\r\nconst IMAGES = ['bootstrap', 'css3', 'git', 'gulp', 'heroku', 'html5', 'javascript', 'jquery', 'linux',\r\n    'materialui', 'mysql', 'nodejs', 'npm', 'php', 'react', 'sass', 'stackoverflow', 'zend'];\r\n\r\nexport default class Deck {\r\n\r\n    constructor() {\r\n        return this.buildDeck();\r\n    }\r\n\r\n    /**\r\n     * Build the deck in pairs and randomize the order\r\n     * @returns {Array}\r\n     */\r\n    buildDeck() {\r\n        let deck = [];\r\n        IMAGES.forEach((img, i) => {\r\n            deck.push({id: `${img}-1`, img: img, flipped: false, matched: false});\r\n            deck.push({id: `${img}-2`, img: img, flipped: false, matched: false});\r\n        });\r\n        return shuffle(deck);\r\n    }\r\n}\r\n\r\n/**\r\n * Update the flipped property of a card by id\r\n * @param deck\r\n * @param id\r\n * @param direction\r\n * @returns {Array|*}\r\n */\r\nvar flipCard = (deck = [],id, direction = 'up') => {\r\n    let flip = (direction === 'up') ? true : false;\r\n    let cardIndex = deck.findIndex(card => card.id === id);\r\n\r\n    if(cardIndex !== -1){\r\n        deck[cardIndex].flipped = flip;\r\n    }\r\n\r\n    return deck;\r\n}\r\n\r\n/**\r\n * Flip all the cards in the deck up or down\r\n * @param direction ['up'||'down']\r\n */\r\nvar flipAll = (deck = [], direction = 'down') => {\r\n    let flip = (direction === 'up') ? true : false;\r\n    deck.forEach((card, i, deck) => deck[i].flipped = flip);\r\n    return deck;\r\n}\r\n\r\n/**\r\n * Flag cards as matched by id\r\n * @param match\r\n * @returns {Array|*}\r\n */\r\nvar makePair = (deck = [], match = []) => {\r\n    deck.forEach((card, i, deck) => {\r\n        if (card.id === match[0] || card.id === match[1]) {\r\n            deck[i].matched = true;\r\n        }\r\n    });\r\n    return deck;\r\n}\r\n\r\n/**\r\n * Determine if two cards match.\r\n * @param card1\r\n * @param card2\r\n * @returns {boolean}\r\n */\r\nvar isPair = (card1 = '',card2 = '') => {\r\n    var re = /(\\w*)-\\d{1,2}/;\r\n    return re.exec(card1)[1] === re.exec(card2)[1];\r\n}\r\n\r\nvar isGameOver = (deck) => {\r\n    return deck.every((card) => {\r\n        return card.matched === true;\r\n    });\r\n}\r\n\r\nexport {flipCard, flipAll, makePair, isPair, isGameOver};\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Board from './Board';\r\nimport Timer from \"./Timer\";\r\n\r\nimport Deck, {flipCard, makePair, isPair, isGameOver} from \"../lib/Deck\";\r\n\r\nconst TURN_DELAY = 800;\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.deck = new Deck();\r\n        this.timerInterval = null;\r\n        this.preventClick = true;\r\n\r\n        this.state = {\r\n            deck: this.deck,\r\n            pendingMatch: [],\r\n            gameStarted: false,\r\n            gameComplete: false,\r\n            time: 0 //in seconds\r\n        };\r\n    }\r\n\r\n    startTimer(){\r\n        this.timerInterval = setInterval(() => {\r\n            this.setState((prevState) => {\r\n                return {\r\n                    time: ++prevState.time\r\n                };\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    stopTimer(){\r\n        clearInterval(this.timerInterval);\r\n    }\r\n\r\n    handlePendingMatch(state) {\r\n        this.preventClick = true;\r\n        setTimeout(() => {\r\n            this.setState({\r\n                pendingMatch: [],\r\n                ...state\r\n            }, () => {\r\n                this.preventClick = false;\r\n\r\n                if(isGameOver(this.state.deck)){\r\n                    this.setState({\r\n                        gameComplete: true\r\n                    });\r\n                }\r\n            });\r\n        }, TURN_DELAY);\r\n    }\r\n\r\n    handleCardPicked(card1,card2,deck, pendingMatch) {\r\n        if (card1 && card2) {\r\n            if (!isPair(card1,card2)) {\r\n                this.handlePendingMatch({\r\n                    deck: flipCard(flipCard(deck, card1, 'down'), card2, 'down')\r\n                });\r\n            } else {\r\n                this.handlePendingMatch({\r\n                    deck: makePair(deck, pendingMatch)\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleClick(e) {\r\n        let {pendingMatch, deck, gameStarted} = this.state;\r\n\r\n        if (!/(\\w*)-\\d{1,2}/.test(e.target.id)\r\n            || pendingMatch.length === 2)\r\n            return;\r\n\r\n        if(!gameStarted){\r\n            //this.startTimer();\r\n            this.setState({\r\n                gameStarted: true\r\n            });\r\n        }\r\n\r\n        if (!pendingMatch.length) {\r\n            let cardId = e.target.id;\r\n\r\n            this.setState({\r\n                gameStarted: true,\r\n                deck: flipCard(deck, cardId),\r\n                pendingMatch: [cardId]\r\n            }, () => {\r\n                let {pendingMatch, deck} = this.state;\r\n                this.handleCardPicked(pendingMatch[0], pendingMatch[1], deck, pendingMatch);\r\n            });\r\n        } else {\r\n            let cardId = e.target.id;\r\n\r\n            this.setState({\r\n                deck: flipCard(deck, cardId),\r\n                pendingMatch: [pendingMatch[0], cardId]\r\n            }, () => {\r\n                let {pendingMatch, deck} = this.state;\r\n                this.handleCardPicked(pendingMatch[0], pendingMatch[1], deck, pendingMatch);\r\n            });\r\n        }\r\n    }\r\n\r\n    newGame(e) {\r\n        let newDeck = new Deck();\r\n        this.setState({\r\n            gameStarted: false,\r\n            gameComplete: false,\r\n            pendingMatch: [],\r\n            deck: newDeck,\r\n            time: 0\r\n        }, () => {\r\n            //this.stopTimer();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let {time, deck, gameComplete} = this.state;\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-xs-12 col-sm-9\">\r\n                    <h1 className=\"text-center\">Concentration</h1>\r\n                    <Board deck={deck} onClick={(e) => this.handleClick(e)}/>\r\n                    <h1 className=\"text-center\">{gameComplete ? 'You Won!' : ''}</h1>\r\n                </div>\r\n                <div className=\"col-xs-10 col-xs-offset-1 col-sm-2 col-sm-offset-0\">   \r\n                    <h1>&nbsp;</h1>                 \r\n                    <div className=\"well well-lg text-center hidden\">\r\n                        <Timer time={time}/>\r\n                    </div>\r\n                    <table className=\"table table-bordered table-striped table-condensed hidden\">\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>Turns:</td>\r\n                            <td>0</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Correct:</td>\r\n                            <td>0</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Accuracy:</td>\r\n                            <td>100%</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Time:</td>\r\n                            <td>00:h:00m:00s</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <button\r\n                        className=\"btn btn-lg btn-primary btn-block\"\r\n                        onClick={(e) => this.newGame(e)}>\r\n                        New Game\r\n                    </button>\r\n                </div>\r\n                <div className=\"col-xs-12\">\r\n                    <h1 className=\"well text-center\">Scoreboard coming soon!</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Game from './components/Game';\r\nimport './App.scss';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <main>\r\n                    <Game/>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}